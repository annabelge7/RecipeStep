{"ast":null,"code":"var _jsxFileName = \"/Users/annabeledwards/Desktop/FullStack/project2/project-2-recipe-step-tracker-v2-annabelge7/src/RecipeStep.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UPDATE_RECIPE_STEP = gql`\n  mutation UpdateRecipeStep($id: ID!, $step: String!) {\n    updateRecipeStep(data: { id: $id, step: $step }) {\n      id\n      step\n      completed\n    }\n  }\n`;\nexport default function RecipeStep({\n  id,\n  step,\n  completed\n}) {\n  _s();\n  /**\n   * TODO #5:\n   * 1. Add state for tracking if step is completed\n   * 2. Update styles based on state\n   */\n  const [isComplete, setComplete] = useState(completed);\n  const [updateRecipeStep, {\n    loading,\n    error\n  }] = useMutation(UPDATE_RECIPE_STEP, {\n    variables: {\n      id,\n      completed\n    }\n  });\n  const handleCheckbox = async e => {\n    const newComplete = !isComplete;\n    // console.log(e);\n    e.preventDefault();\n    setComplete(newComplete);\n    const {\n      data\n    } = await updateRecipeStep({\n      variables: {\n        id,\n        step,\n        completed: newComplete\n      },\n      //copied this directly from apollo docs to learn about optimistc response\n      optimisticResponse: {\n        updateStep: {\n          id: id,\n          completed: newComplete,\n          __typename: \"RecipeStep\"\n        }\n      }\n    });\n  };\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 21\n  }, this);\n  if (loading) return \"Loading...\";\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      style: {\n        textDecoration: isComplete ? \"line-through\" : \"none\"\n      },\n      className: \"m-2\",\n      children: step\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: isComplete,\n      onChange: handleCheckbox\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(RecipeStep, \"scNy0IiwAK1O0ZQkSYPRCnQDhtw=\", false, function () {\n  return [useMutation];\n});\n_c = RecipeStep;\nvar _c;\n$RefreshReg$(_c, \"RecipeStep\");","map":{"version":3,"names":["React","useState","useMutation","gql","jsxDEV","_jsxDEV","UPDATE_RECIPE_STEP","RecipeStep","id","step","completed","_s","isComplete","setComplete","updateRecipeStep","loading","error","variables","handleCheckbox","e","newComplete","preventDefault","data","optimisticResponse","updateStep","__typename","children","message","fileName","_jsxFileName","lineNumber","columnNumber","style","textDecoration","className","type","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/annabeledwards/Desktop/FullStack/project2/project-2-recipe-step-tracker-v2-annabelge7/src/RecipeStep.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useMutation, gql } from \"@apollo/client\";\n\nconst UPDATE_RECIPE_STEP = gql`\n  mutation UpdateRecipeStep($id: ID!, $step: String!) {\n    updateRecipeStep(data: { id: $id, step: $step }) {\n      id\n      step\n      completed\n    }\n  }\n`;\n\nexport default function RecipeStep({ id, step, completed }) {\n  /**\n   * TODO #5:\n   * 1. Add state for tracking if step is completed\n   * 2. Update styles based on state\n   */\n  const [isComplete, setComplete] = useState(completed);\n  const [updateRecipeStep, { loading, error }] = useMutation(\n    UPDATE_RECIPE_STEP,\n    {\n      variables: { id, completed },\n    }\n  );\n\n  const handleCheckbox = async (e) => {\n    const newComplete = !isComplete;\n    // console.log(e);\n    e.preventDefault();\n    setComplete(newComplete);\n\n    const { data } = await updateRecipeStep({\n      variables: { id, step, completed: newComplete },\n      //copied this directly from apollo docs to learn about optimistc response\n      optimisticResponse: {\n        updateStep: {\n          id: id,\n          completed: newComplete,\n          __typename: \"RecipeStep\",\n        },\n      },\n    });\n  };\n\n  if (error) return <p>error: {error.message}</p>;\n  if (loading) return \"Loading...\";\n  return (\n    <li>\n      <label\n        style={{ textDecoration: isComplete ? \"line-through\" : \"none\" }}\n        className=\"m-2\"\n      >\n        {step}\n      </label>\n      <input\n        type=\"checkbox\"\n        checked={isComplete}\n        onChange={handleCheckbox}\n      ></input>\n    </li>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,GAAG,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,kBAAkB,GAAGH,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,eAAe,SAASI,UAAUA,CAAC;EAAEC,EAAE;EAAEC,IAAI;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EAC1D;AACF;AACA;AACA;AACA;EACE,MAAM,CAACC,UAAU,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAACS,SAAS,CAAC;EACrD,MAAM,CAACI,gBAAgB,EAAE;IAAEC,OAAO;IAAEC;EAAM,CAAC,CAAC,GAAGd,WAAW,CACxDI,kBAAkB,EAClB;IACEW,SAAS,EAAE;MAAET,EAAE;MAAEE;IAAU;EAC7B,CACF,CAAC;EAED,MAAMQ,cAAc,GAAG,MAAOC,CAAC,IAAK;IAClC,MAAMC,WAAW,GAAG,CAACR,UAAU;IAC/B;IACAO,CAAC,CAACE,cAAc,CAAC,CAAC;IAClBR,WAAW,CAACO,WAAW,CAAC;IAExB,MAAM;MAAEE;IAAK,CAAC,GAAG,MAAMR,gBAAgB,CAAC;MACtCG,SAAS,EAAE;QAAET,EAAE;QAAEC,IAAI;QAAEC,SAAS,EAAEU;MAAY,CAAC;MAC/C;MACAG,kBAAkB,EAAE;QAClBC,UAAU,EAAE;UACVhB,EAAE,EAAEA,EAAE;UACNE,SAAS,EAAEU,WAAW;UACtBK,UAAU,EAAE;QACd;MACF;IACF,CAAC,CAAC;EACJ,CAAC;EAED,IAAIT,KAAK,EAAE,oBAAOX,OAAA;IAAAqB,QAAA,GAAG,SAAO,EAACV,KAAK,CAACW,OAAO;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAC/C,IAAIhB,OAAO,EAAE,OAAO,YAAY;EAChC,oBACEV,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MACE2B,KAAK,EAAE;QAAEC,cAAc,EAAErB,UAAU,GAAG,cAAc,GAAG;MAAO,CAAE;MAChEsB,SAAS,EAAC,KAAK;MAAAR,QAAA,EAEdjB;IAAI;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACR1B,OAAA;MACE8B,IAAI,EAAC,UAAU;MACfC,OAAO,EAAExB,UAAW;MACpByB,QAAQ,EAAEnB;IAAe;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAET;AAACpB,EAAA,CAlDuBJ,UAAU;EAAA,QAOeL,WAAW;AAAA;AAAAoC,EAAA,GAPpC/B,UAAU;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}